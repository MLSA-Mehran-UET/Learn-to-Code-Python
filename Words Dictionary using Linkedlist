from IPython.display import clear_output
try:
    class Node:
        def __init__(self, word, meaning):
            self.data1 = word
            self.data2 = meaning
            self.Next = None

    class LinkedList:
        ItemCount=0
        Start=None
        Curr=None
        def read_word(self):
            file = open("wordsss.txt",'r')
            lines = file.readlines()
            file.close()
            count = 1
            for line in lines:
                for i in range(len(lines)-1):
                    for j in range(len(lines)-1-i):
                        if lines[j] > lines[j+1]:
                            temp = lines[j]
                            lines[j] = lines[j+1]
                            lines[j+1] = temp
                temp = line.split(',')
                word = temp[0].replace('\'','')
                meaning = temp[1].replace('\n','')
                var ={
                    'word': word,
                    'meaning': meaning
                }
                print(count, var)
                count += 1

        def _init_(self):
            self.Start = None

        def _int_(self, word, meaning):
            self.Start= Node(word,meaning)
                
                
                
        def APPEND(self, word, meaning):
            if self.Start is None:
                self.Start = Node(word,meaning)
            else:
                pointer = self.Start
                while pointer.Next != Node:
                    pointer=pointer.Next
                    pointer.Next = Node(word,meaning)
            user_data = '{}, {}\n'.format(word,meaning)
            f = open("wordsss.txt",'a+')
            f.write(user_data)

        def AddWord(self, word, meaning):
            self.ItemCount=self.ItemCount+1
            temp= Node(word,meaning)

            if self.Start is None:
                self.Start = temp
                self.Curr=self.Start
            else:
                self.Curr.Next = temp
                self.Curr = self.Curr.Next
            return self.Curr.data2


        def ShowWord(self,word):
            found=0
            meaning=""
            if self.Start is None:
                print("List khali hai")
            else:
                self.CurrNode = self.Start
                for i in range(0, self.ItemCount):
                
                  if(word in self.CurrNode.data1):
                    if(self.CurrNode.data1.index(word)==0):
                            meaning=""
                            meaning=self.CurrNode.data2
                            print(self.CurrNode.data1+" "+meaning)
                            found= found+1
                    self.CurrNode=self.CurrNode.Next
                  else:
                        self.CurrNode=self.CurrNode.Next
                        meaning=""

                if(found == 0):
                    print("Not Found")




    class All:
        aj = LinkedList()
        hn = LinkedList()
        oz = LinkedList()

        def Read(self):
            file = open('wordsss.txt','r')
            lines = file.readlines()
            file.close()
            count = 1
            for line in lines:
                temp = line.split(',')
                word = temp[0].replace('\'','')
                meaning = temp[1].replace('\n','')
                var ={
                    'word': word,
                    'meaning': meaning
                }
                count += 1
                if(ord(word[0]) > 110):
                    self.oz.AddWord(word,meaning)
                elif(ord(word[0]) > 107):
                    self.hn.AddWord(word,meaning)
                else:
                    self.aj.AddWord(word,meaning)




        def Show(self,word):
            if(ord(word[0]) > 110): #n
                 self.oz.ShowWord(word)
            elif(ord(word[0]) > 107): #k
                self.hn.ShowWord(word)
            else:
                self.aj.ShowWord(word)

    test = All()
    meri_marzi = LinkedList()
    while True:
        print("============ WORDS  DICTIONARY ====================")
        print("Press 1 for Read:")
        print("press 2 for Search a Character:")
        print("press 3 for Add a Word & Meaning:")
        print("press 4 to Quit: ")
        c = int(input("Enter Choice: "))
        if c == 1:
            print("============ Read ====================")
            meri_marzi.read_word()
            print("============ End ====================")
            input("Press Enter for Menu: ")
            clear_output()
        elif c ==2:
            test.Read()
            print("============ Search ====================")
            w = str(input("What Do You Want To Search: "))
            test.Show(w)
            input("Press Enter for Menu: ")
            clear_output()
        elif c ==3:
            print("============ Insert a Word ====================")
            print(" Write in Quotes ")
            w=str(input("Enter Word: "))
            m=str(input("Enter Meaning: "))
            meri_marzi.APPEND(w,m)
            print("Insertion Done....!")
            input("Press Enter for Menu: ")
            clear_output()
        elif c ==4:
            break
        else:
            print("Invalid")
except:
    pass
